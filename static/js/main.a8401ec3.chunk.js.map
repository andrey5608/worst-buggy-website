{"version":3,"sources":["CreditCalculator/CalculatorSlider.jsx","CreditCalculator/CreditCalculator.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","width","input","InputSlider","props","classes","React","useState","Number","initialValue","value","setValue","maxValue","rangeMax","className","Typography","id","gutterBottom","Grid","container","spacing","alignItems","item","xs","Slider","onChange","event","newValue","aria-labelledby","min","rangeMin","max","Input","margin","target","onBlur","inputProps","step","type","dataid","label","CreditCalculator","onButtonClick","bind","state","isAlertOpened","message","inputMonthsValue","inputLoanValue","this","setState","setTimeout","updateLoanInputValue","updateMonthsInputValue","calculateLoanPayment","Math","round","months","document","getElementById","console","log","loanValue","Fragment","Button","variant","color","onClick","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a8401ec3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Input from '@material-ui/core/Input';\r\nimport './CalculatorSlider.css'\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: 300,\r\n  },\r\n  input: {\r\n    width: 42,\r\n  },\r\n});\r\n\r\nexport default function InputSlider(props) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(Number(props.initialValue));\r\n\r\n  const maxValue = props.rangeMax;\r\n\r\n  const handleSliderChange = (event, newValue) => {\r\n    if (newValue < 0) {\r\n        setValue(0);\r\n      } else if (newValue > maxValue) {\r\n        setValue(maxValue);\r\n      } else{\r\n          setValue(newValue);\r\n      }\r\n  };\r\n\r\n  const handleInputChange = event => {\r\n    setValue(event.target.value === '' ? '' : Number(event.target.value));\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    if (value < 0) {\r\n      setValue(0);\r\n    } else if (value > maxValue) {\r\n      setValue(maxValue);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Typography id=\"input-slider\" gutterBottom>\r\n      </Typography>\r\n      <Grid container spacing={2} alignItems=\"flex-start\">\r\n        <Grid item>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Slider\r\n            value={typeof value === 'number' ? value : 0}\r\n            onChange={handleSliderChange}\r\n            aria-labelledby=\"input-slider\"\r\n            min={Number(props.rangeMin)}\r\n            max={Number(props.rangeMax)}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <Input\r\n            className={classes.input}\r\n            value={value}\r\n            margin=\"dense\"\r\n            onChange={handleInputChange}\r\n            onBlur={handleBlur}\r\n            inputProps={{\r\n              step: 1,\r\n              min: props.rangeMin,\r\n              max: props.rangeMax,\r\n              type: 'number',\r\n              'aria-labelledby': 'input-slider',\r\n            }}\r\n            id={props.dataid}\r\n          /> {props.label}\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport CalculatorSlider from './CalculatorSlider';\r\n\r\nexport class CreditCalculator extends React.Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.onButtonClick = this.onButtonClick.bind(this);\r\n    this.state = \r\n    {\r\n      isAlertOpened: false,\r\n      message: '',\r\n      inputMonthsValue: '',\r\n      inputLoanValue: ''\r\n    };\r\n  }\r\n\r\n  onButtonClick()  {\r\n    this.setState({isAlertOpened: false});\r\n    setTimeout(() => {\r\n    this.updateLoanInputValue();\r\n    this.updateMonthsInputValue();\r\n    this.calculateLoanPayment();\r\n    this.setState({\r\n      isAlertOpened: true\r\n    });}, 1000);    \r\n  }\r\n\r\n  calculateLoanPayment(){\r\n    this.setState({\r\n      message: `Loan monthly payment: ${Math.round(this.state.inputLoanValue/this.state.inputMonthsValue) + 10} $, \r\n      Term: ${this.state.inputMonthsValue} months.`\r\n    });\r\n  }  \r\n\r\n  updateMonthsInputValue() {\r\n    var months = Number(document.getElementById(\"totalMonthsInput\").value);\r\n    this.setState({\r\n      inputMonthsValue: months\r\n    });\r\n    console.log(`months: ${this.state.inputMonthsValue}`);\r\n  }\r\n\r\n  updateLoanInputValue() {\r\n    var loanValue = Number(document.getElementById(\"totalLoanInput\").value);\r\n    this.setState({\r\n      inputLoanValue: loanValue\r\n    });\r\n    console.log(`loan: ${this.state.inputLoanValue}`);\r\n  }\r\n\r\n  componentDidMount(){\r\n    console.log(`${this.state.inputLoanValue}, ${this.state.inputMonthsValue}`);\r\n  }\r\n\r\n  componentWillUnmount(){\r\n  }\r\n\r\n    render() {\r\n      return (\r\n        <React.Fragment>\r\n        <h1>Calculate your loan payment</h1>\r\n        <div>Select credit term</div>\r\n        <CalculatorSlider dataid=\"totalMonthsInput\" rangeMin=\"0\" rangeMax=\"60\" label=\"months\" initialValue=\"24\"/>\r\n        <div>Select total loan amount</div>\r\n        <CalculatorSlider dataid=\"totalLoanInput\" rangeMin=\"0\" rangeMax=\"21001\" label=\"$\" initialValue=\"500\"/>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={this.onButtonClick}>\r\n            Calculate now\r\n        </Button>\r\n        <Snackbar\r\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n        open={this.state.isAlertOpened}\r\n        autoHideDuration={1}\r\n        message={this.state.message}\r\n      />\r\n        </React.Fragment>\r\n      );\r\n    }\r\n}\r\n\r\nexport default CreditCalculator;","import React from 'react';\nimport './App.css';\nimport CreditCalculator from './CreditCalculator/CreditCalculator'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <CreditCalculator />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}